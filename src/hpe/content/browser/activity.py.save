# -*- coding: utf-8 -*- 
from Products.Five.browser import BrowserView
from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
from plone import api
from plone.protect.interfaces import IDisableCSRFProtection
from zope.interface import alsoProvides
from plone.namedfile.field import NamedBlobImage
from plone import namedfile
from Products.CMFPlone.utils import safe_unicode
import base64
from db.connect.browser.views import SqlObj
import datetime
import time


class UpdateActivity(BrowserView):
    def __call__(self):
        request = self.request

        # 檢查是否已完整填寫員工資料
        current = api.user.get_current()
#        import pdb; pdb.set_trace()
        if not (current.getProperty('en_name') and current.getProperty('officephone') and current.getProperty('cellphone')):
            return 'loseData'

        select_date = request.get('select_date[]')
        if type(select_date) == str:
            select_date = [select_date]
        event = request.get('event')
        user = api.user.get_current().getProperty('email')
	step = request.get('step')
        execSql = SqlObj()
        for activity in select_date:

            # 寫進活動列表
            execStr = """INSERT INTO activity(user,category,activity_date,step) VALUES('{}','{}'
                ,'{}','{}')""".format(user, event, activity,step)
            execSql.execSql(execStr)
            # 寫進log
            log = '報名%s' %activity
            execStr = """INSERT INTO log(user,category,log) VALUES('{}','{}','{}')
                """.format(user, event, log)
            execSql.execSql(execStr)
        return 'success'


class EventHandl(BrowserView):
    def __call__(self):
        request = self.request
        context = self.context
        worker_roles = api.user.get_current().getRoles()
        if 'Reader' in worker_roles:
            email = request.get('email')
            start = time.mktime(context.start.timetuple())
            end = time.mktime(context.end.timetuple())
            now = time.time()
            user_name = api.user.get(username=email).getProperty('fullname')
            start_date = context.start.strftime('%Y-%m-%d %H:%M')
            step = context.step
            now_time = datetime.datetime.fromtimestamp(now).strftime('%Y-%m-%d %H:%M:%S')
            # 介再開始和結束的時間內且role要是讀者
            if now >= start and now <= end:
                execSql = SqlObj()
                execStr = """SELECT * FROM activity WHERE user='{}' AND 
                    activity_date='{}'""".format(email, start_date)
                result = execSql.execSql(execStr)
                tmp = dict(result[0])
                if not tmp:
	            return '您沒報名'
                if tmp['is_first'] == 0 and tmp['is_end'] == 0 and tmp['check_in_time'] == None:
                    execStr = """UPDATE activity SET is_first = 1,check_in_time='{}' WHERE user='{}' AND 
                        activity_date='{}'""".format(now_time, email, start_date)
                    execSql.execSql(execStr)
                    execStr = """INSERT INTO log(user,category,log) VALUES('{}','{}','{}')
                        """.format(email, '活動進行', '%s 活動參加' %now_time)
                    execSql.execSql(execStr)
                    return '%s %s 報到成功' %(user_name, now_time)
                elif tmp['is_first'] == 1 and tmp['is_end'] == 0 and tmp['check_in_time'] and tmp['finish_time'] == None:
                    check_in_time = datetime.datetime.strptime(tmp['check_in_time'], '%Y-%m-%d %H:%M:%S')
                    now = datetime.datetime.now()
                    time_delta = now - check_in_time
                    if time_delta.total_seconds() > 60:
                        execStr = """UPDATE activity SET is_end = 1,step='{}',finish_time='{}' WHERE 
                            user='{}' AND activity_date='{}'
                            """.format(step, now.strftime('%Y-%m-%d %H:%M:%S'), email, start_date)
                        execSql.execSql(execStr)
                        execStr = """INSERT INTO log(user,category,log) VALUES('{}','{}','{}')
                            """.format(email, '活動進行', '%s活動完成'%now.strftime('%Y-%m-%d %H:%M:%S') ) 
                        execSql.execSql(execStr)
                        return '%s %s 活動完成' %(user_name, now_time)
                    else:
                        return '%s 您已報到過   請勿重複報到' %user_name
                elif tmp['is_first'] == 1 and tmp['is_end'] == 1:
                    return '%s 您已完成活動  請勿再報到' %user_name
            else:
                return '開始時間,結束時間或會員權限有問題'
        else:
            return '權限不足'

class CancelActivity(BrowserView):
    def __call__(self):
        request = self.request
        activity_date = request.get('activity_date')
        category = request.get('category')
        lang = request.get('lang')
        user = api.user.get_current().getProperty('email')
        execSql = SqlObj()

        execStr = """DELETE FROM activity WHERE user='{}' AND activity_date='{}'
            """.format(user, activity_date)
        execSql.execSql(execStr)

        execStr = """INSERT INTO log(user,log,category) VALUES('{}','{}','{}')
            """.format(user, '取消%s' %activity_date , category)
        execSql.execSql(execStr)
        if lang == 'Chinese':
            request.response.redirect('%s/profile' %api.portal.get().absolute_url())
        if lang == 'English':
	    request.response.redirect('%s/en_profile' %api.portal.get().absolute_url())


class ShowActivityStatus(BrowserView):
    template = ViewPageTemplateFile('template/show_activity_status.pt')
    def __call__(self):
        request = self.request
        execSql = SqlObj()
        
        execStr = """SELECT user,activity_date,sing_up_time FROM activity  
            ORDER BY sing_up_time"""
        result = execSql.execSql(execStr)
        day1 = []
        day2 = []
        day3 = []
        day4 = []
        for item in result:
            tmp = dict(item)
            activity_date = tmp['activity_date']
            sing_up_time = tmp['sing_up_time']
            user = tmp['user']
            if activity_date == '2018-04-10 09:00':
                day1.append([user, sing_up_time])
            elif activity_date == '2018-04-19 09:00':
                day2.append([user, sing_up_time])
            elif activity_date == '2018-04-12 12:00':
                day3.append([user, sing_up_time])
            elif activity_date == '2018-04-26 12:00':
                day4.append([user, sing_up_time])
        
        self.day1 = day1
        self.day2 = day2
        self.day3 = day3
        self.day4 = day4

        return self.template()class ShowActivityStatus(BrowserView):
    template = ViewPageTemplateFile('template/show_activity_status.pt')
    def __call__(self):
        request = self.request
        execSql = SqlObj()
        
        execStr = """SELECT user,activity_date,sing_up_time FROM activity  
            ORDER BY sing_up_time"""
        result = execSql.execSql(execStr)
        day1 = []
        day2 = []
        day3 = []
        day4 = []
        for item in result:
            tmp = dict(item)
            activity_date = tmp['activity_date']
            sing_up_time = tmp['sing_up_time']
            user = tmp['user']
            if activity_date == '2018-04-10 09:00':
                day1.append([user, sing_up_time])
            elif activity_date == '2018-04-19 09:00':
                day2.append([user, sing_up_time])
            elif activity_date == '2018-04-12 12:00':
                day3.append([user, sing_up_time])
            elif activity_date == '2018-04-26 12:00':
                day4.append([user, sing_up_
